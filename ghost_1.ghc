inc [10]             ; ghc invocation counter
; used to change approach depending on time spent
; in the game for getting out of the home

; Initial hack. For the first few moves do "fickle" to get out of home
jgt 16, [10], 10

; 2
; Keep track of how long we have spent travelling in each direction.
; Try to go in the direction we've travelled in least.

; Count of time spent going in direction 0 is in memory address 0, and so on.
mov a,255      ; A is the min value.
mov b,0        ; B is the corresponding direction.
mov c,255      ; C is the candidate direction for the new min.

; Start of loop.
; 5
inc c          ; Pick new direction.
jgt 9,[c],a    ; Jump if count of direction C is above best so far.
; We have a new min.
mov a,[c]      ; Save new min.
mov b,c        ; Save direction.
; 9
jlt 5,c,3      ; Jump target. Loop back if we have not tried all 4 directions.

mov a,b        ; Actually set desired direction.
int 0

int 3          ; Get our ghost index in A.
int 6          ; Get out current direction in B.
inc [b]        ; Increment corresponding count.
hlt            ; Stop.

; 16
int 1               ; Get lambdaman's coordinates

mov [11], a          ; Save the lambdaman's coordinates in 11,12
mov [12], b

int 6               ; Get the ghost's vitality and direction

mov [15], a          ; Save the ghost's vitality in 15
mov [16], b          ; Save the ghost's direction in 16

int 3               ; Get the ghost's index
int 5               ; Get the ghost's current position in

mov [13], a          ; Save the ghost's coordinates in 13,14
mov [14], b

sub a, [11]          ; Find out whether lambdaman is on left or right

jgt 35, a, [13]  ; if diff is negative (diff greater than x in x-y)
jeq 30, a, 0     ; if diff is 0
jlt 40, a, [13]   ; if diff is positive

; horizontal diff is equal
; check for vertical difference
; 30
sub b, [12]          ; Find out whether lambdaman is on up or down

jgt 38, b, [14]   ; if diff is negative (diff greater than x in x-y)

jlt 33, b, [14]     ; if diff is positive

; 33
; lambdaman is up
mov c, 0
jeq 43, c, c      ; non conditional jump to end

; 35
; lambdaman is on the right
jeq 30, [16], 3   ; ghost is going left, check for vertical
mov c, 1
jeq 43, c, c      ; non conditional jump to end

; 38
; lambdaman is down
mov c, 2
jeq 43, c, c      ; non conditional jump to end

; 40
; lambdaman is on the left
jeq 30, [16], 1   ; ghost is going right, check for vertical
mov c, 3
jeq 43, c, c      ; non conditional jump to end

; 43
mov a, c
int 0
hlt
